ArrayList <Integer> boundary(Node node)
	{
	    ArrayList <Integer> ans=new ArrayList<>();
	    if(!leaf(node)) ans.add(node.data);
	    left_traversal(node,ans);
	    leaf_traversal(node,ans);
	    right_traversal(node,ans);
	    return ans;
	}
	boolean leaf(Node node){
	    return node.left==null && node.right==null;
	}
	void left_traversal(Node node,List<Integer>ans){
	    Node cur=node.left;
	    while(cur!=null){
	        if(!leaf(cur))ans.add(cur.data);
	        if(cur.left!=null)cur=cur.left;
	        else cur=cur.right;
	    }
	}
	void right_traversal(Node node,List<Integer>ans){
	    Node cur=node.right;
	    List<Integer>temp=new ArrayList<>();
	    while(cur!=null){
	        if(!leaf(cur))temp.add(cur.data);
	        if(cur.right!=null)cur=cur.right;
	        else cur=cur.left;
	    }
	    for(int i=temp.size()-1;i>=0;i--){
	        ans.add(temp.get(i));
	    }
	}
	void leaf_traversal(Node node,List<Integer>ans){
	    if(leaf(node)){
	        ans.add(node.data);
	        return;
	    }
	    if(node.left!=null) leaf_traversal(node.left,ans);
	    if(node.right!=null) leaf_traversal(node.right,ans);
	}Boundary traversal of bt