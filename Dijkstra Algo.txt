class Solution
{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        int[] dis=new int[V];
        PriorityQueue<pair>pq=new PriorityQueue<>((x,y)->x.distance-y.distance);;
        Arrays.fill(dis,(int)1e9);
        dis[S]=0;
        pq.add(new pair(0,S));
        while(!pq.isEmpty()){
            int pd=pq.peek().distance;
            int pn=pq.peek().node;
            pq.remove();
            for(int i=0;i<adj.get(pn).size();i++){
                int cd=adj.get(pn).get(i).get(1);
                int cn=adj.get(pn).get(i).get(0);
                if(cd+pd<dis[cn]){
                    dis[cn]=cd+pd;
                    pq.add(new pair(cd+pd,cn));
                }
            }
        }
        return dis;
    }
}
class pair{
    int distance;
    int node;
    pair(int d,int n){
        distance=d;
        node=n;
    }
}
Dijkstra