class Solution
{
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        int vis[]=new int[V];
        PriorityQueue<pair>pq=new PriorityQueue<>((x,y)->x.distance-y.distance);
        pq.add(new pair(0,0));
        int sum=0;
        while(!pq.isEmpty()){
            int pd=pq.peek().distance;
            int pn=pq.peek().node;
            pq.remove();
            if(vis[pn]==1) continue;
            vis[pn]=1;
            sum+=pd;
            for(int i=0;i<adj.get(pn).size();i++){
                int tn=adj.get(pn).get(i).get(0);
                int td=adj.get(pn).get(i).get(1);
                if(vis[tn]==0){
                    pq.add(new pair(td,tn));
                }
            }
        }
        return sum;
    }
}
class pair{
    int distance;
    int node;
    pair(int d,int n){
        distance=d;
        node=n;
    }
}